generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model espiritu {
  id                  Int      @id @default(autoincrement())
  nombre              String?  @db.VarChar
  descripcion         String?  @db.VarChar
  foto                String?  @db.VarChar
  id_usuario          String?
  descripcion_sistema String?  @db.VarChar
  usuario             usuario? @relation(fields: [id_usuario], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "id_usuario")
}

model pregunta {
  id          Int       @id @default(autoincrement())
  descripcion String?   @db.VarChar
  respuesta   String?   @db.VarChar
  id_usuario  String?   @db.VarChar
  fecha       DateTime? @db.Date
  tipo        String?   @db.VarChar
  favorito    Boolean?  @default(false)
  usuario     usuario?  @relation(fields: [id_usuario], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "id_usuario")
}

model respuesta {
  respuesta String? @db.VarChar
  id        String  @id @db.VarChar
}

model usuario {
  email                   String                    @unique(map: "email") @db.VarChar
  password                String?                   @db.VarChar
  id                      String                    @id @default(uuid())
  isEmailVerified         Boolean                   @default(false)
  type                    String                    @db.VarChar
  esencia                 Float?
  createdAt               DateTime                  @default(now())
  hasSeenInstructions     Boolean                   @default(false)
  ResultadoDialogoAbierto ResultadoDialogoAbierto[]
  espiritu                espiritu[]
  evaluacion_general      evaluacion_general?
  notificaciones          notificaciones[]
  pregunta                pregunta[]
  transferencia           transferencia[]
}

model moneda {
  id          Int     @id
  descripcion String? @db.VarChar
}

model respuesta_dia {
  id        String  @id @db.VarChar
  respuesta String? @db.VarChar
}

model respuesta_especial {
  id        String  @id @db.VarChar
  respuesta String? @db.VarChar
}

model esencia {
  id          Int     @id @default(autoincrement())
  precio      String? @db.VarChar
  descripcion String? @db.VarChar
  descuento   Int?    @default(0)
}

model respuesta_predialogo {
  respuesta String? @db.VarChar
  id        String  @id @db.VarChar
}

model respuesta_general1 {
  id        String  @id @db.VarChar
  respuesta String? @db.VarChar
}

model respuesta_general2 {
  id        String  @id @db.VarChar
  respuesta String? @db.VarChar
}

model respuesta_general3 {
  id        String  @id @db.VarChar
  respuesta String? @db.VarChar
}

model respuesta_general4 {
  id        String  @id @db.VarChar
  respuesta String? @db.VarChar
}

model evaluacion_general {
  id                 Int     @id @default(autoincrement())
  user_id            String  @unique(map: "user_id_unique") @db.VarChar
  respuesta_general1 String? @db.VarChar
  respuesta_general2 String? @db.VarChar
  respuesta_general3 String? @db.VarChar
  respuesta_general4 String? @db.VarChar
  usuario            usuario @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "user_id")
}

model transferencia {
  id       Int      @id @default(autoincrement())
  user_id  String?  @db.VarChar
  receiver String?  @db.VarChar
  amount   Float?
  date     DateTime @default(now())
  usuario  usuario? @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "user_id")
}

model compra {
  id         Int      @id @default(autoincrement())
  email      String?  @db.VarChar
  date       DateTime @default(now())
  bank_order String?  @db.VarChar
}

model notificaciones {
  id          Int      @id @default(autoincrement())
  id_usuario  String?  @db.VarChar
  descripcion String?  @db.VarChar
  estado      Boolean? @default(false)
  date        DateTime @default(now())
  nombre      String?  @db.VarChar
  tipo        String?  @db.VarChar
  usuario     usuario? @relation(fields: [id_usuario], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model launch {
  id         String   @id
  userId     String
  type       String
  shortType  String
  hexResults String[]
  steps      Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime
}

model message {
  id         String   @id
  type       String
  segmentKey String
  language   String
  content    String
  createdAt  DateTime @default(now())
  updatedAt  DateTime
}

model LanzamientoSistema {
  id                 Int                @id @default(autoincrement())
  secuencia          String             @db.VarChar(255)
  resultado_numero   Int
  resultado_texto    String
  interpretacion     String
  sistemaId          Int
  createdAt          DateTime?          @default(now()) @db.Timestamp(6)
  updatedAt          DateTime?          @default(now()) @db.Timestamp(6)
  SistemaLanzamiento SistemaLanzamiento @relation(fields: [sistemaId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([sistemaId, secuencia])
}

model ResultadoDialogoAbierto {
  id             String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  usuarioId      String    @db.VarChar(255)
  lanzamiento1   String    @db.VarChar(255)
  lanzamiento2   String    @db.VarChar(255)
  sistemaUsado   String    @db.VarChar(255)
  resultados     Json
  resultadoFinal String
  createdAt      DateTime? @default(now()) @db.Timestamp(6)
  updatedAt      DateTime? @default(now()) @db.Timestamp(6)
  usuario        usuario   @relation(fields: [usuarioId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model SistemaLanzamiento {
  id                 Int                  @id @default(autoincrement())
  codigo             String               @unique @db.VarChar(255)
  nombre             String?              @db.VarChar(255)
  descripcion        String?
  createdAt          DateTime?            @default(now()) @db.Timestamp(6)
  updatedAt          DateTime?            @default(now()) @db.Timestamp(6)
  LanzamientoSistema LanzamientoSistema[]
  Sistemita          Sistemita[]
}

model Sistemita {
  id                 Int                @id @default(autoincrement())
  numero             Int
  secuencia          String             @db.VarChar(255)
  resultado_texto    String
  interpretacion     String
  sistemaId          Int
  createdAt          DateTime?          @default(now()) @db.Timestamp(6)
  updatedAt          DateTime?          @default(now()) @db.Timestamp(6)
  SistemaLanzamiento SistemaLanzamiento @relation(fields: [sistemaId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([sistemaId, numero, secuencia])
}
